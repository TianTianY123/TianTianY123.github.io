<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>buuctf reverse wp</title>
    <url>/2020/10/25/reverse3/</url>
    <content><![CDATA[<p>Reverse engineering, also called back engineering, is the process by which a man-made object is deconstructed to reveal its designs, architecture, or to extract knowledge from the object; —— from <a href="https://en.wikipedia.org/wiki/Reverse_engineering">wikipedia</a></p>
<p>本文上传一些buuoj上刷过的一些逆向题的write up.</p>
<h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><p> exeinfope查壳</p>
<p> 32位无壳</p>
<p>[<img src="https://s1.ax1x.com/2020/10/25/Be9a6J.png" alt="Be9a6J.png"></p>
<p>ida查看</p>
<p>看到关键词rigth flag!，base64input</p>
<p>[<img src="https://s1.ax1x.com/2020/10/25/Be9sk6.png" alt="Be9sk6.png"></p>
<p>进入rigth flag!对应的函数查看，发现关键语句</p>
<p>[<img src="https://s1.ax1x.com/2020/10/25/Be9gpD.png" alt="Be9gpD.png"></p>
<p>就是用sub_4110BE函数对flag加密，再进行一个移位变换后与str2比较，查看str2为 e3nifIH9b_C@n@dH</p>
<p>[<img src="https://s1.ax1x.com/2020/10/25/BeCM9O.png" alt="BeCM9O.png">]</p>
<p>进入sub_4110BE函数，发现其大量用以下代码</p>
<p>[<img src="https://s1.ax1x.com/2020/10/25/BeClge.png" alt="BeClge.png"></p>
<p>并结合base64input字符，猜测为base64编码，即对str2字符串移位变换再base64解码后得到flag.</p>
<p>解密脚本为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">str2=<span class="string">&#x27;e3nifIH9b_C@n@dH&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str2)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(str2[i])-i)</span><br><span class="line">flag=base64.b64decode(flag)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>





<h1 id="BJDCTF-2nd-8086"><a href="#BJDCTF-2nd-8086" class="headerlink" title="[BJDCTF 2nd]8086"></a>[BJDCTF 2nd]8086</h1><p>ida查看，只有start和sub_10030两个函数</p>
<p>start函数调用了sub_10030函数，sub_10030函数是个死循环，不断调用自己，直接看汇编</p>
<p>[<img src="https://s1.ax1x.com/2020/10/25/BmZMrT.png" alt="BmZMrT.png"></p>
<p>应该是对上面的字符串进行运算得到flag,将下面的代码块强制转汇编得</p>
<p>[<img src="https://s1.ax1x.com/2020/10/25/BmmsgI.png" alt="BmmsgI.png">]</p>
<p>应该是将0x22个字符与0x1F异或得到flag</p>
<p>解题脚本为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">r&#x27;]U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)^<span class="number">0x1F</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>



<h1 id="刮开有奖"><a href="#刮开有奖" class="headerlink" title="刮开有奖"></a>刮开有奖</h1><p>ida打开找到关键函数DialogFunc</p>
<p><img src="https://i.loli.net/2020/10/26/1srGmpL3lBcIagw.png" alt="1">]</p>
<p>推断String数组即为flag,并且有8位。而后v7为一个数组，先用sub_4010F0函数进行了加工，进入sub_4010F0函数</p>
<p><img src="https://i.loli.net/2020/10/26/eGpzbhNEduSwtTj.png" alt="2">]</p>
<p>翻译成C代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">sub_4010F0</span><span class="params">(<span class="keyword">char</span> a1[], <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> v5;</span><br><span class="line">  <span class="keyword">int</span> v6;</span><br><span class="line"></span><br><span class="line">  result = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = a2; i &lt;= a3; a2 = i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 =i;</span><br><span class="line">    v6 = a1[i];</span><br><span class="line">    <span class="keyword">if</span> ( a2 &lt; result &amp;&amp; i &lt; result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 &gt; a1[result] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          ++i;</span><br><span class="line">          a1[v5] = a1[result];</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">while</span> ( a1[i] &lt;= v6 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ++i &gt;= result )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> ( i &gt;= result )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          v5 =i;</span><br><span class="line">          a1[result] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        --result;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( i &lt; result );</span><br><span class="line">    &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">    a1[result] = v6;</span><br><span class="line">    sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">    result = a3;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> a[]=&#123;<span class="number">90</span>, <span class="number">74</span>, <span class="number">83</span>, <span class="number">69</span>, <span class="number">67</span>, <span class="number">97</span>, <span class="number">78</span>, <span class="number">72</span>, <span class="number">51</span>, <span class="number">110</span>, <span class="number">103</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,a);</span><br><span class="line">	sub_4010F0(a,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果为</p>
<p>ZJSECaNH3ng<br>3CSJNSaZEgn</p>
<p>接着往下</p>
<p><img src="https://i.loli.net/2020/10/26/kevQF5KRz4xLUGB.png" alt="3">]</p>
<p>这部分用sub_401000函数加工字符串的678位和345位，进入sub_401000函数发现其中byte_407830字符串为ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=,推断其为base64编码</p>
<p>再看最后的if判断</p>
<p><img src="https://i.loli.net/2020/10/26/2jMm7IBXS51qh3T.png" alt="4">]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ( String &#x3D;&#x3D; v7 + 34                   &#x2F;&#x2F;String &#x3D;&#x3D; &#39;3&#39;+34  即第一位为&#39;U&#39;</span><br><span class="line">        &amp;&amp; v19 &#x3D;&#x3D; v11                  &#x2F;&#x2F;第二位为&#39;J&#39;</span><br><span class="line">        &amp;&amp; 4 * v20 - 141 &#x3D;&#x3D; 3 * v9 &#x2F;&#x2F;第三位(&#39;E&#39;*3+141)&#x2F;4 即&#39;W&#39;</span><br><span class="line">        &amp;&amp; v21 &#x2F; 4 &#x3D;&#x3D; 2 * (v14 &#x2F; 9)&#x2F;&#x2F;第四位为&#39;P&#39;</span><br><span class="line">        &amp;&amp; !strcmp(v4, &quot;ak1w&quot;)      &#x2F;&#x2F;ak1w解码为jMp，即第678位为jMp</span><br><span class="line">        &amp;&amp; !strcmp(v5, &quot;V1Ax&quot;) )    &#x2F;&#x2F;V1Ax解码为WP1，即第345位为WP1</span><br></pre></td></tr></table></figure>

<p>最后拼出flag为  flag{UJWP1jMp}</p>
]]></content>
      <categories>
        <category>buuctf wp</category>
      </categories>
      <tags>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>Ty&#39;s blog</title>
    <url>/2100/10/12/hello-world/</url>
    <content><![CDATA[<p>hello world</p>
]]></content>
  </entry>
  <entry>
    <title>linux系统学习</title>
    <url>/2021/03/06/linux%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="linux系统学习"><a href="#linux系统学习" class="headerlink" title="linux系统学习"></a>linux系统学习</h1><h3 id="一、文件属性修改"><a href="#一、文件属性修改" class="headerlink" title="一、文件属性修改"></a>一、文件属性修改</h3><p>在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。每个用户分别具有r(read),w(write),x(execute)，即读写执行三种权限。</p>
<p>用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组。</p>
<h5 id="1、chgrp：更改文件属组"><a href="#1、chgrp：更改文件属组" class="headerlink" title="1、chgrp：更改文件属组"></a>1、chgrp：更改文件属组</h5> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure>

<p>-R:递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p>
<h5 id="2、chown：更改文件属主，也可以同时更改文件属组"><a href="#2、chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="2、chown：更改文件属主，也可以同时更改文件属组"></a>2、chown：更改文件属主，也可以同时更改文件属组</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure>

<h5 id="3、chmod：更改文件9个属性"><a href="#3、chmod：更改文件9个属性" class="headerlink" title="3、chmod：更改文件9个属性"></a>3、chmod：更改文件9个属性</h5><p>1）数字  r:4, w:2, x:1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</span><br><span class="line">others&#x3D; --- &#x3D; 0+0+0 &#x3D; 0</span><br><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure>

<p>2)符号   user: 用户，group：组，others: 其他  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod	u   +(加入)	r   文件或目录</span><br><span class="line">        g   -(去除)   w   </span><br><span class="line">        0   &#x3D;(设定)   x</span><br><span class="line">        a(all)</span><br></pre></td></tr></table></figure>



<h3 id="二，文件与目录管理"><a href="#二，文件与目录管理" class="headerlink" title="二，文件与目录管理"></a>二，文件与目录管理</h3><p><strong>绝对路径：</strong><br>路径的写法，由根目录 <strong>/</strong> 写起，例如： /usr/share/doc 这个目录。</p>
<p><strong>相对路径：</strong><br>路径的写法，不是由 <strong>/</strong> 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： <strong>cd ../man</strong> 这就是相对路径的写法。</p>
<h5 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls（英文全拼：list files）: 列出目录及文件名</span><br><span class="line">cd（英文全拼：change directory）：切换目录</span><br><span class="line">pwd（英文全拼：print work directory）：显示目前的目录</span><br><span class="line">mkdir（英文全拼：make directory）：创建一个新的目录</span><br><span class="line">rmdir（英文全拼：remove directory）：删除一个空的目录</span><br><span class="line">cp（英文全拼：copy file）: 复制文件或目录</span><br><span class="line">rm（英文全拼：remove）: 删除文件或目录</span><br><span class="line">mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</span><br></pre></td></tr></table></figure>

<h5 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat  由第一行开始显示文件内容</span><br><span class="line">tac  从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</span><br><span class="line">nl   显示的时候，顺道输出行号！</span><br><span class="line">more 一页一页的显示文件内容</span><br><span class="line">less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</span><br><span class="line">head 只看头几行</span><br><span class="line">tail 只看尾巴几行</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>基础学习</tag>
      </tags>
  </entry>
</search>
